Title: Borrower.cpp
Content:
#include "Borrower.h"

Borrower::Borrower(const std::string& name) : name(name) {}

std::string Borrower::getName() const {
    return name;
}------------------------
Title: Borrower.h
Content:
#ifndef BORROWER_H
#define BORROWER_H

#include <string>

class Borrower {
private:
    std::string name;

public:
    Borrower(const std::string &name);
    std::string getName() const;
};

#endif //BORROWER_H
------------------------
Title: CMakeLists.txt
Content:
cmake_minimum_required(VERSION 3.24)
project(SP_CPPBank)

set(CMAKE_CXX_STANDARD 14)

include_directories(.)

add_executable(SP_CPPBank
        Borrower.cpp
        Borrower.h
        Currency.cpp
        Currency.h
        Deal.cpp
        Deal.h
        Facility.cpp
        Facility.h
        Lender.cpp
        Lender.h
        main.cpp Portfolio.cpp
        Portfolio.h
        Part.cpp
        Part.h)
------------------------
Title: Currency.cpp
Content:
#include "Currency.h"

Currency::Currency(const std::string &code) : code(code) {}

std::string Currency::getCode() const {
    return code;
}

------------------------
Title: Currency.h
Content:
#ifndef CURRENCY_H
#define CURRENCY_H

#include <string>

class Currency {
private:
    std::string code;

public:
    Currency(const std::string &code);
    std::string getCode() const;
};

#endif //CURRENCY_H

------------------------
Title: Deal.cpp
Content:
#include "Deal.h"
#include "Facility.h"

Deal::Deal(const std::string& contractNumber,
           const Lender& agent,
           const std::vector<Lender>& pool,
           const Borrower& borrower,
           double amount,
           const Currency& currency,
           const std::chrono::system_clock::time_point& start,
           const std::chrono::system_clock::time_point& ending)
        : contractNumber(contractNumber),
          agent(agent),
          pool(pool),
          borrower(borrower),
          amount(amount),
          currency(currency),
          start(start),
          ending(ending) {
    status = "Initiated";
}

void Deal::addFacility(const Facility& facility) {
    facilities.push_back(facility);
}
void Deal::setStatus(const std::string& status) {
    this->status = status;
}
------------------------
Title: Deal.h
Content:
#ifndef DEAL_H
#define DEAL_H

#include <string>
#include <vector>
#include <chrono>
#include "Lender.h"
#include "Borrower.h"
#include "Currency.h"
// Forward declaration of Facility
class Facility;
class Deal {
protected:
    std::string contractNumber;
    Lender agent;
    std::vector<Lender> pool;
    Borrower borrower;
    double amount;
    Currency currency;
    std::chrono::system_clock::time_point start;
    std::chrono::system_clock::time_point ending;
    std::string status;
    std::vector<Facility> facilities; // Store facilities in a vector


public:
    // constructors, setters, etc...

    Deal(const std::string& contractNumber, const Lender& agent, const std::vector<Lender>& pool,
    const Borrower& borrower, double amount, const Currency& currency,
    const std::chrono::system_clock::time_point& start, const std::chrono::system_clock::time_point& ending);

    std::string getContractNumber() const { return contractNumber; }
    Lender getAgent() const { return agent; }
    std::vector<Lender> getPool() const { return pool; }
    Borrower getBorrower() const { return borrower; }
    double getAmount() const { return amount; }
    Currency getCurrency() const { return currency; }
    std::chrono::system_clock::time_point getStart() const { return start; }
    std::chrono::system_clock::time_point getEnd() const { return ending; }
    std::string getStatus() const { return status; }
    void setStatus(const std::string& status);

    void addFacility(const Facility& facility);
};
#endif
------------------------
Title: Facility.cpp
Content:
#include "Facility.h"
#include "Part.h"

Facility::Facility(const std::string& contractNumber,
                   const Lender& agent,
                   const std::vector<Lender>& pool,
                   const Borrower& borrower,
                   double amount,
                   const Currency& currency,
                   const std::chrono::system_clock::time_point& start,
                   const std::chrono::system_clock::time_point& ending,
                   const std::chrono::system_clock::time_point& repaymentSchedule,
                   double earlyRepaymentPenalty)
        : Deal(contractNumber, agent, pool, borrower, amount, currency, start, ending),
          repaymentSchedule(repaymentSchedule),
          earlyRepaymentPenalty(earlyRepaymentPenalty),totalPrincipalRepaid(0.0) {
    interestRate = calculateInterestRate(); // Calculate the interest rate using the method
}

double Facility::calculateInterestRate() const {
    // Calculate the interest rate based on some logic
    // You can modify this function according to your requirements
    return 0.05; // Return a dummy interest rate of 0.05 (5%)
}

double Facility::calculateInterest() const {
    auto duration = std::chrono::duration_cast<std::chrono::hours>(ending - start).count();
    double years = duration / (24.0 * 365.0);

    const double inflationRate = 0.02;  // assumed annual inflation rate of 2%
    double realInterestRate = ((1 + interestRate) / (1 + inflationRate)) - 1;

    return this->amount * realInterestRate * years;
}

void Facility::addPart(const Part& part) {
    parts.push_back(new Part(part)); // Create a new Part object and store its pointer
}

std::vector<Part> Facility::getParts() const {
    std::vector<Part> result;
    for (const Part* partPtr : parts) {
        result.push_back(*partPtr); // Dereference the stored pointer to get the actual Part object
    }
    return result;
}
bool Facility::isPaidInFull() const {
    return totalPrincipalRepaid >= amount;
}

void Facility::makeRepayment(double amount) {
    if (!isPaidInFull()) {
        totalPrincipalRepaid += amount;
    }
}

double Facility::getRemainingPrincipal() {
    double totalRepaid = 0.0;
    for (Part *part : parts) {
        totalRepaid += part->getRepaymentAmount();
    }
    return amount - totalRepaid;
}
------------------------
Title: Facility.h
Content:
#ifndef SP_CPPBANK_FACILITY_H
#define SP_CPPBANK_FACILITY_H
#pragma once
#include <vector>
#include "Deal.h"

class Part;  // forward declaration
// Forward declaration of Deal
class Deal;
class Facility : public Deal {
private:
    double interestRate;
    std::chrono::system_clock::time_point repaymentSchedule;
    double earlyRepaymentPenalty;
    std::vector<Part*> parts;
    double calculateInterestRate() const;
    double totalPrincipalRepaid; // Add this line
    double getRemainingPrincipal() const;
public:
    Facility(const std::string& contractNumber,
             const Lender& agent,
             const std::vector<Lender>& pool,
             const Borrower& borrower,
             double amount,
             const Currency& currency,
             const std::chrono::system_clock::time_point& start,
             const std::chrono::system_clock::time_point& ending,
             const std::chrono::system_clock::time_point& repaymentSchedule,
             double earlyRepaymentPenalty);

    double getInterestRate() const { return interestRate; }
    void setInterestRate(double interestRate) { this->interestRate = interestRate; }

    std::chrono::system_clock::time_point getRepaymentSchedule() const { return repaymentSchedule; }
    void setRepaymentSchedule(const std::chrono::system_clock::time_point& repaymentSchedule) { this->repaymentSchedule = repaymentSchedule; }

    double getEarlyRepaymentPenalty() const { return earlyRepaymentPenalty; }
    void setEarlyRepaymentPenalty(double earlyRepaymentPenalty) { this->earlyRepaymentPenalty = earlyRepaymentPenalty; }

    double calculateInterest() const;
    void addPart(const Part& part);
    std::vector<Part> getParts() const;
    void makeRepayment(double amount);
    bool isPaidInFull() const;

    double getRemainingPrincipal();

};

#endif // SP_CPPBANK_FACILITY_H------------------------
Title: Lender.cpp
Content:
#include "Lender.h"

Lender::Lender(const std::string &name) : name(name) {}

std::string Lender::getName() const {
    return name;
}

------------------------
Title: Lender.h
Content:
#ifndef LENDER_H
#define LENDER_H

#include <string>

class Lender {
private:
    std::string name;

public:
    Lender(const std::string &name);
    std::string getName() const;
};

#endif //LENDER_H

------------------------
Title: Part.cpp
Content:
// Created by diop on 24/06/2023.

#include "Part.h"
#include "Facility.h"  // include Facility header here
Part::Part(Facility& facility, double repaymentAmount, std::chrono::system_clock::time_point repaymentDate)
        : facility(facility), repaymentAmount(repaymentAmount), repaymentDate(repaymentDate) {
    // Initialize remainingToPay with the repaymentAmount
    remainingToPay = repaymentAmount;
}
// Define the constructor. It initializes the member variables with the provided arguments.

Facility& Part::getFacility() {  // Define method to get the facility
    return facility;  // Return reference to the facility
}

double Part::getRepaymentAmount() {  // Define method to get the repayment amount
    return repaymentAmount;  // Return the repayment amount
}

std::chrono::system_clock::time_point Part::getRepaymentDate() {
    return repaymentDate;  // Return the repayment date
}------------------------
Title: Part.h
Content:
#ifndef SP_CPPBANK_PART_H
#define SP_CPPBANK_PART_H

#include <chrono>
#include <string>  // Include for std::string
class Facility;  // forward declaration

class Part {  // Define class Part
public:
    Part(Facility& facility, double repaymentAmount, std::chrono::system_clock::time_point repaymentDate);  // Update the constructor
    Facility& getFacility();  // Method to get the facility
    double getRepaymentAmount();  // Method to get the repayment amount
    std::chrono::system_clock::time_point getRepaymentDate();
    double getRemainingToPay() const { return remainingToPay; }  // Moved to public section

private:
    Facility& facility;  // Private member variable: reference to Facility
    double repaymentAmount;  // Private member variable: repayment amount
    std::chrono::system_clock::time_point repaymentDate;
    double remainingToPay; // Amount remaining to be paid

    void setRemainingToPay(double amount) { remainingToPay = amount; }
};

#endif //SP_CPPBANK_PART_H------------------------
Title: Portfolio.cpp
Content:
#include <algorithm>
#include "Portfolio.h"

Portfolio::Portfolio() {
    // Add any necessary initialization code here
}
Portfolio::Portfolio(const std::vector<Facility>& facilities)
        : facilities(facilities) {}

void Portfolio::addFacility(const Facility& facility) {
    facilities.push_back(facility);
}

void Portfolio::removeFacility(const std::string& contractNumber) {
    facilities.erase(std::remove_if(facilities.begin(), facilities.end(),
                                    [&contractNumber](const Facility& facility) {
                                        return facility.getContractNumber() == contractNumber;
                                    }),
                     facilities.end());
}

double Portfolio::calculateTotalInterest() const {
    double totalInterest = 0;
    for (const auto& facility : facilities) {
        totalInterest += facility.calculateInterest();
    }
    return totalInterest;
}

bool Portfolio::isLoanPaidInFull() const {
    for (const auto& facility : facilities) {
        if (!facility.isPaidInFull()) {
            return false;
        }
    }
    return true;
}

void Portfolio::makeRepayment(const std::string& contractNumber, double amount) {
    for (auto& facility : facilities) {
        if (facility.getContractNumber() == contractNumber) {
            facility.makeRepayment(amount);
            break;
        }
    }
}------------------------
Title: Portfolio.h
Content:
#ifndef SP_CPPBANK_PORTFOLIO_H
#define SP_CPPBANK_PORTFOLIO_H

#include <vector>
#include "Facility.h"

class Portfolio {
public:
    Portfolio(); // Default constructor
    Portfolio(const std::vector<Facility>& facilities);

    void addFacility(const Facility& facility);
    double calculateTotalValue() const;
    double calculateTotalInterest() const;
    void makeRepayment(const std::string& contractNumber, double amount);
    bool isLoanPaidInFull() const;

private:
    std::vector<Facility> facilities;

    void removeFacility(const std::string& contractNumber);
};

#endif // SP_CPPBANK_PORTFOLIO_H------------------------
Title: README.md
Content:
# SP_CPPBank------------------------
Title: main.cpp
Content:
#include <iostream>
#include <vector>
#include <chrono>
#include "Deal.h"
#include "Facility.h"
#include "Part.h"
#include "Portfolio.h"
#include "Lender.h"
#include "Borrower.h"

// ...

int main() {
    // Create lenders
    Lender lender1("JP Morgan Chase");
    Lender lender2("Bank of America");
    Lender lender3("Wells Fargo");

    // Add lenders to the pool
    std::vector<Lender> pool = {lender2, lender3};

    // Create borrower
    Borrower borrower("Air France");

    // Create a deal
    std::string contractNumber = "D1234";
    double amount = 1000000.0;
    Currency currency("EUR");
    std::chrono::system_clock::time_point start = std::chrono::system_clock::now();
    std::chrono::system_clock::time_point ending = start + std::chrono::hours(24 * 365); // 1 year
    Deal deal(contractNumber, lender1, pool, borrower, amount, currency, start, ending);

    // Create facilities
    std::chrono::system_clock::time_point facilityStart = start;
    std::chrono::system_clock::time_point facilityEnd = start + std::chrono::hours(24 * 90); // 90 days
    double facilityAmount = 500000.0;
    Currency facilityCurrency("USD");
    std::chrono::system_clock::time_point repaymentSchedule = start + std::chrono::hours(24 * 30); // 30 days
    double earlyRepaymentPenalty = 0.2; // Example value
    Facility facility1(contractNumber, lender1, pool, borrower, facilityAmount, facilityCurrency, facilityStart,
                       facilityEnd, repaymentSchedule, earlyRepaymentPenalty);

    // Add facility to the deal
    deal.addFacility(facility1);

    // Create parts
    double partAmount = 100000.0;
    std::chrono::system_clock::time_point partRepaymentDate = facilityStart + std::chrono::hours(24 * 30); // 30 days
    Part part1(facility1, partAmount, partRepaymentDate);

    // Add part to the facility
    facility1.addPart(part1);

    // Create portfolio
    Portfolio portfolio;

    // Add facility to the portfolio
    portfolio.addFacility(facility1);

    std::cout << "Loan Details" << std::endl;
    std::cout << "Contract Number: " << contractNumber << std::endl;
    std::cout << "Borrower: " << borrower.getName() << std::endl;
    std::cout << "Amount: " << amount << " " << currency.getCode() << std::endl;
    std::cout << "Starting Date: " << start.time_since_epoch().count() << std::endl;
    std::cout << "Ending Date: " << ending.time_since_epoch().count() << std::endl;

    std::cout << "Facility Details" << std::endl;
    std::cout << "Amount: " << facilityAmount << " " << facilityCurrency.getCode() << std::endl;
    std::cout << "Repayment Schedule: " << repaymentSchedule.time_since_epoch().count() << std::endl;
    std::cout << "Early Repayment Penalty: " << earlyRepaymentPenalty << std::endl;

    // Perform repayment cycles until the loan is paid in full
    while (!facility1.isPaidInFull()) {
        // Calculate and display the total interest in the portfolio
        double totalInterest = portfolio.calculateTotalInterest();
        std::cout << "Total Interest in the Portfolio: " << totalInterest << std::endl;

        // Make a repayment
        double remainingPrincipal = facility1.getRemainingPrincipal(); // Get the remaining principal amount
        double repaymentAmount = remainingPrincipal + totalInterest; // Repayment amount includes remaining principal and interest

        std::cout << "Making Repayment..." << std::endl;
        std::cout << "Repayment Amount: " << repaymentAmount << " " << facilityCurrency.getCode() << std::endl;
        std::cout << "Paying back lenders:" << std::endl;
        std::cout << "- Agent: " << facility1.getAgent().getName() << std::endl;
        std::cout << "- Pool Lenders: ";
        for (const Lender& lender : facility1.getPool()) {
            std::cout << lender.getName() << ", ";
        }
        std::cout << std::endl;

        facility1.makeRepayment(repaymentAmount);

        // Update the total interest after the repayment
        totalInterest = portfolio.calculateTotalInterest();

        // Create a new part for the next repayment cycle
        partRepaymentDate += std::chrono::hours(24 * 30); // 30 days
        Part newPart(facility1, partAmount, partRepaymentDate);

        // Add the new part to the facility and portfolio
        facility1.addPart(newPart);
        portfolio.addFacility(facility1);

        std::cout << "New Part Added for Repayment Cycle:" << std::endl;
        std::cout << "Part Repayment Date: " << partRepaymentDate.time_since_epoch().count() << std::endl;
    }

    std::cout << "Loan has been fully repaid!" << std::endl;

    return 0;
}

// ...
------------------------
Title: script.sh
Content:
#!/bin/bash

# Clean output file if it exists
if [[ -f output.txt ]]; then
	rm output.txt
fi

for file in *; do
	if [[ -f $file ]]; then
		echo "Title: $file" >> output.txt
		echo "Content:" >> output.txt
		cat "$file" >> output.txt
		echo "------------------------" >> output.txt
	fi
done

------------------------
