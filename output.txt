Title: Borrower.cpp
Content:
#include "Borrower.h"

Borrower::Borrower(const std::string& name) : name(name) {}

std::string Borrower::getName() const {
    return name;
}------------------------
Title: Borrower.h
Content:
#ifndef BORROWER_H
#define BORROWER_H

#include <string>

class Borrower {
private:
    std::string name;

public:
    Borrower(const std::string &name);
    std::string getName() const;
};

#endif //BORROWER_H
------------------------
Title: CMakeLists.txt
Content:
cmake_minimum_required(VERSION 3.25)
project(SP_CPPBank)

set(CMAKE_CXX_STANDARD 14)

include_directories(.)

add_executable(SP_CPPBank
        Borrower.cpp
        Borrower.h
        Currency.cpp
        Currency.h
        Deal.cpp
        Deal.h
        Facility.cpp
        Facility.h
        Lender.cpp
        Lender.h
        main.cpp Portfolio.cpp Portfolio.h Part.cpp Part.h)
------------------------
Title: Currency.cpp
Content:
#include "Currency.h"

Currency::Currency(const std::string &code) : code(code) {}

std::string Currency::getCode() const {
    return code;
}

------------------------
Title: Currency.h
Content:
#ifndef CURRENCY_H
#define CURRENCY_H

#include <string>

class Currency {
private:
    std::string code;

public:
    Currency(const std::string &code);
    std::string getCode() const;
};

#endif //CURRENCY_H

------------------------
Title: Deal.cpp
Content:
#include "Deal.h"


Deal::Deal(const std::string &contractNumber,
           const Lender &agent,
           const std::vector<Lender> &pool,
           const Borrower &borrower,
           double amount,
           const Currency &currency,
           const std::chrono::system_clock::time_point &start,
           const std::chrono::system_clock::time_point &ending)
    : contractNumber(contractNumber), agent(agent), pool(pool), borrower(borrower), amount(amount), currency(currency), start(start), ending(ending) {
    status = "Initiated";
}

void Deal::setStatus(const std::string& status) {
    this->status = status;
}
------------------------
Title: Deal.h
Content:
#ifndef DEAL_H
#define DEAL_H

#include <string>
#include <vector>
#include <chrono>
#include "Lender.h"
#include "Borrower.h"
#include "Currency.h"

class Deal {
protected:
    std::string contractNumber;
    Lender agent;
    std::vector<Lender> pool;
    Borrower borrower;
    double amount;
    Currency currency;
    std::chrono::system_clock::time_point start;
    std::chrono::system_clock::time_point ending;
    std::string status;

public:
    // constructors, setters, etc...

    Deal(const std::string& contractNumber, const Lender& agent, const std::vector<Lender>& pool,
    const Borrower& borrower, double amount, const Currency& currency,
    const std::chrono::system_clock::time_point& start, const std::chrono::system_clock::time_point& ending);

    std::string getContractNumber() const { return contractNumber; }
    Lender getAgent() const { return agent; }
    std::vector<Lender> getPool() const { return pool; }
    Borrower getBorrower() const { return borrower; }
    double getAmount() const { return amount; }
    Currency getCurrency() const { return currency; }
    std::chrono::system_clock::time_point getStart() const { return start; }
    std::chrono::system_clock::time_point getEnd() const { return ending; }
    std::string getStatus() const { return status; }
    void setStatus(const std::string& status);
};
#endif
------------------------
Title: Facility.cpp
Content:
#include "Facility.h"
#include "Part.h"
Facility::Facility(const std::string& contractNumber,
                   const Lender& agent,
                   const std::vector<Lender>& pool,
                   const Borrower& borrower,
                   double amount,
                   const Currency& currency,
                   const std::chrono::system_clock::time_point& start,
                   const std::chrono::system_clock::time_point& ending,
                   double interestRate,
                   const std::chrono::system_clock::time_point& repaymentSchedule,
                   double earlyRepaymentPenalty)
        : Deal(contractNumber, agent, pool, borrower, amount, currency, start, ending),
          interestRate(interestRate),
          repaymentSchedule(repaymentSchedule),
          earlyRepaymentPenalty(earlyRepaymentPenalty) {}

double Facility::calculateInterest() const {
    auto duration = std::chrono::duration_cast<std::chrono::hours>(ending - start).count();
    double years = duration / (24.0 * 365.0);

    const double inflationRate = 0.02;  // assumed annual inflation rate of 2%
    double realInterestRate = ((1 + interestRate) / (1 + inflationRate)) - 1;

    return this->amount * realInterestRate * years;
}------------------------
Title: Facility.h
Content:
#ifndef SP_CPPBANK_FACILITY_H
#define SP_CPPBANK_FACILITY_H

#include "Deal.h"
#include "Part.h"

class Facility : public Deal {
private:
    double interestRate;
    std::chrono::system_clock::time_point repaymentSchedule;
    double earlyRepaymentPenalty;
    std::vector<Part> parts; // Store parts in a vector

public:
    Facility(const std::string& contractNumber, const Lender& agent, const std::vector<Lender>& pool,
             const Borrower& borrower, double amount, const Currency& currency,
             const std::chrono::system_clock::time_point& start,
             const std::chrono::system_clock::time_point& ending,
             double interestRate,
             const std::chrono::system_clock::time_point& repaymentSchedule,
             double earlyRepaymentPenalty);

    double getInterestRate() const { return interestRate; }
    void setInterestRate(double interestRate) { this->interestRate = interestRate; }

    std::chrono::system_clock::time_point getRepaymentSchedule() const { return repaymentSchedule; }
    void setRepaymentSchedule(const std::chrono::system_clock::time_point& repaymentSchedule) { this->repaymentSchedule = repaymentSchedule; }

    double getEarlyRepaymentPenalty() const { return earlyRepaymentPenalty; }
    void setEarlyRepaymentPenalty(double earlyRepaymentPenalty) { this->earlyRepaymentPenalty = earlyRepaymentPenalty; }

    double calculateInterest() const;
    // Method to add a part
    void addPart(const Part& part) {
        parts.push_back(part);
    }

    // Method to get all parts
    std::vector<Part> getParts() const {
        return parts;
    }
};

#endif // SP_CPPBANK_FACILITY_H------------------------
Title: Lender.cpp
Content:
#include "Lender.h"

Lender::Lender(const std::string &name) : name(name) {}

std::string Lender::getName() const {
    return name;
}

------------------------
Title: Lender.h
Content:
#ifndef LENDER_H
#define LENDER_H

#include <string>

class Lender {
private:
    std::string name;

public:
    Lender(const std::string &name);
    std::string getName() const;
};

#endif //LENDER_H

------------------------
Title: Part.cpp
Content:
// Created by diop on 24/06/2023.

#include "Part.h"

Part::Part(Facility& facility, double repaymentAmount, std::chrono::system_clock::time_point repaymentDate)
        : facility(facility), repaymentAmount(repaymentAmount), repaymentDate(repaymentDate) {
    // Initialize remainingToPay with the repaymentAmount
    remainingToPay = repaymentAmount;
}
// Define the constructor. It initializes the member variables with the provided arguments.

Facility& Part::getFacility() {  // Define method to get the facility
    return facility;  // Return reference to the facility
}

double Part::getRepaymentAmount() {  // Define method to get the repayment amount
    return repaymentAmount;  // Return the repayment amount
}

std::chrono::system_clock::time_point Part::getRepaymentDate() {
    return repaymentDate;  // Return the repayment date
}------------------------
Title: Part.h
Content:
#ifndef SP_CPPBANK_PART_H
#define SP_CPPBANK_PART_H

#include <chrono>
#include <string>  // Include for std::string
#include "Facility.h"  // Include for Facility

class Part {  // Define class Part
public:
    Part(Facility& facility, double repaymentAmount, std::chrono::system_clock::time_point repaymentDate);  // Update the constructor
    Facility& getFacility();  // Method to get the facility
    double getRepaymentAmount();  // Method to get the repayment amount
    std::chrono::system_clock::time_point getRepaymentDate();
    double getRemainingToPay() const { return remainingToPay; }  // Moved to public section

private:
    Facility& facility;  // Private member variable: reference to Facility
    double repaymentAmount;  // Private member variable: repayment amount
    std::chrono::system_clock::time_point repaymentDate;
    double remainingToPay; // Amount remaining to be paid

    void setRemainingToPay(double amount) { remainingToPay = amount; }
};

#endif //SP_CPPBANK_PART_H------------------------
Title: Portfolio.cpp
Content:
#include <algorithm>
#include "Portfolio.h"

Portfolio::Portfolio(const std::vector<Facility>& facilities)
        : facilities(facilities) {}

void Portfolio::addFacility(const Facility& facility) {
    facilities.push_back(facility);
}

void Portfolio::removeFacility(const std::string& contractNumber) {
    facilities.erase(std::remove_if(facilities.begin(), facilities.end(),
                                    [&contractNumber](const Facility& facility) {
                                        return facility.getContractNumber() == contractNumber;
                                    }),
                     facilities.end());
}

double Portfolio::calculateTotalInterest() const {
    double totalInterest = 0;
    for (const auto& facility : facilities) {
        totalInterest += facility.calculateInterest();
    }
    return totalInterest;
}------------------------
Title: Portfolio.h
Content:
#ifndef SP_CPPBANK_PORTFOLIO_H
#define SP_CPPBANK_PORTFOLIO_H

#include <vector>
#include "Facility.h"

class Portfolio {
public:
    Portfolio() {} // default constructor
    Portfolio(const std::vector<Facility> &facilities);

    void addFacility(const Facility& facility);
    double calculateTotalValue() const;
    double calculateTotalInterest() const;
private:
    std::vector<Facility> facilities;

    void removeFacility(const std::string &contractNumber);
};

#endif // SP_CPPBANK_PORTFOLIO_H------------------------
Title: README.md
Content:
# SP_CPPBank------------------------
Title: main.cpp
Content:
#include <iostream>
#include <vector>
#include "Lender.h"
#include "Borrower.h"
#include "Currency.h"
#include "Deal.h"
#include "Facility.h"
#include "Portfolio.h"
#include "Part.h"

int main() {
    // Create Lenders
    Lender lender1("Bank A");
    Lender lender2("Bank B");
    Lender lender3("Bank C");

    // Create a pool of lenders
    std::vector<Lender> pool = {lender1, lender2, lender3};

    // Create a Borrower
    Borrower borrower("Air France");

    // Create a Currency
    Currency currency("USD");

    auto now = std::chrono::system_clock::now();

    // Deal start and end dates
    std::chrono::system_clock::time_point start = now;
    std::chrono::system_clock::time_point ending = start + std::chrono::hours(24*365);  // One year later

    // Create a Deal
    Deal deal("S1234", lender1, pool, borrower, 10000000, currency, start, ending);

    // Create a Facility with an interest rate of 0.05 (5%) and an early repayment penalty of 0.2 (20%)
    Facility facility("FAC1", lender1, pool, borrower, 5000000.0, currency, start, ending, 0.05, now, 0.2);

    // Create a Part with a repayment of 1 million and a repayment date a year later
    auto one_year_from_now = std::chrono::system_clock::now() + std::chrono::hours(24*365);
    Part part(facility, 1000000.0, one_year_from_now);
    // Create a Portfolio
    Portfolio portfolio;

    // Add the facility to the portfolio
    portfolio.addFacility(facility);

    // Print some info about the deal
    std::cout << "Deal Contract Number: " << deal.getContractNumber() << std::endl;
    std::cout << "Deal Agent: " << deal.getAgent().getName() << std::endl;
    std::cout << "Deal Borrower: " << deal.getBorrower().getName() << std::endl;
    std::cout << "Deal Amount: " << deal.getAmount() << std::endl;
    std::cout << "Deal Currency: " << deal.getCurrency().getCode() << std::endl;
    std::cout << "Deal Status: " << deal.getStatus() << std::endl;

    // Print out details of the facility
    std::cout << "Facility Contract Number: " << facility.getContractNumber() << std::endl;
    std::cout << "Facility Agent: " << facility.getAgent().getName() << std::endl;
    std::cout << "Facility Borrower: " << facility.getBorrower().getName() << std::endl;
    std::cout << "Facility Amount: " << facility.getAmount() << std::endl;
    std::cout << "Facility Currency: " << facility.getCurrency().getCode() << std::endl;
    std::cout << "Facility Interest: " << facility.calculateInterest() << std::endl;  // Print calculated interest

    // Print out details of the Part
    std::cout << "Part Facility Contract Number: " << part.getFacility().getContractNumber() << std::endl;
    std::cout << "Part Repayment Amount: " << part.getRepaymentAmount() << std::endl;
    std::cout << "Part Remaining to Pay: " << part.getRemainingToPay() << std::endl;

    // Print out details of the portfolio
    std::cout << "Portfolio Total Interest: " << portfolio.calculateTotalInterest() << std::endl;

    return 0;
}------------------------
Title: script.sh
Content:
#!/bin/bash

# Clean output file if it exists
if [[ -f output.txt ]]; then
	rm output.txt
fi

for file in *; do
	if [[ -f $file ]]; then
		echo "Title: $file" >> output.txt
		echo "Content:" >> output.txt
		cat "$file" >> output.txt
		echo "------------------------" >> output.txt
	fi
done

------------------------
